{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * respect https://github.com/cuth/postcss-pxtorem\n */\nimport unitless from '@emotion/unitless';\nconst pxRegex = /url\\([^)]+\\)|var\\([^)]+\\)|(\\d*\\.?\\d+)px/g;\nfunction toFixed(number, precision) {\n  const multiplier = Math.pow(10, precision + 1),\n    wholeNumber = Math.floor(number * multiplier);\n  return Math.round(wholeNumber / 10) * 10 / multiplier;\n}\nconst transform = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    rootValue = 16,\n    precision = 5,\n    mediaQuery = false\n  } = options;\n  const pxReplace = (m, $1) => {\n    if (!$1) return m;\n    const pixels = parseFloat($1);\n    // covenant: pixels <= 1, not transform to rem @zombieJ\n    if (pixels <= 1) return m;\n    const fixedVal = toFixed(pixels / rootValue, precision);\n    return `${fixedVal}rem`;\n  };\n  const visit = cssObj => {\n    const clone = _extends({}, cssObj);\n    Object.entries(cssObj).forEach(_ref => {\n      let [key, value] = _ref;\n      if (typeof value === 'string' && value.includes('px')) {\n        const newValue = value.replace(pxRegex, pxReplace);\n        clone[key] = newValue;\n      }\n      // no unit\n      if (!unitless[key] && typeof value === 'number' && value !== 0) {\n        clone[key] = `${value}px`.replace(pxRegex, pxReplace);\n      }\n      // Media queries\n      const mergedKey = key.trim();\n      if (mergedKey.startsWith('@') && mergedKey.includes('px') && mediaQuery) {\n        const newKey = key.replace(pxRegex, pxReplace);\n        clone[newKey] = clone[key];\n        delete clone[key];\n      }\n    });\n    return clone;\n  };\n  return {\n    visit\n  };\n};\nexport default transform;","map":{"version":3,"names":["_extends","unitless","pxRegex","toFixed","number","precision","multiplier","Math","pow","wholeNumber","floor","round","transform","options","arguments","length","undefined","rootValue","mediaQuery","pxReplace","m","$1","pixels","parseFloat","fixedVal","visit","cssObj","clone","Object","entries","forEach","_ref","key","value","includes","newValue","replace","mergedKey","trim","startsWith","newKey"],"sources":["C:/Users/lenovo/Desktop/glang-gin-vue3/ginBlog/web/admin/node_modules/ant-design-vue/es/_util/cssinjs/transformers/px2rem.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\n/**\n * respect https://github.com/cuth/postcss-pxtorem\n */\nimport unitless from '@emotion/unitless';\nconst pxRegex = /url\\([^)]+\\)|var\\([^)]+\\)|(\\d*\\.?\\d+)px/g;\nfunction toFixed(number, precision) {\n  const multiplier = Math.pow(10, precision + 1),\n    wholeNumber = Math.floor(number * multiplier);\n  return Math.round(wholeNumber / 10) * 10 / multiplier;\n}\nconst transform = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    rootValue = 16,\n    precision = 5,\n    mediaQuery = false\n  } = options;\n  const pxReplace = (m, $1) => {\n    if (!$1) return m;\n    const pixels = parseFloat($1);\n    // covenant: pixels <= 1, not transform to rem @zombieJ\n    if (pixels <= 1) return m;\n    const fixedVal = toFixed(pixels / rootValue, precision);\n    return `${fixedVal}rem`;\n  };\n  const visit = cssObj => {\n    const clone = _extends({}, cssObj);\n    Object.entries(cssObj).forEach(_ref => {\n      let [key, value] = _ref;\n      if (typeof value === 'string' && value.includes('px')) {\n        const newValue = value.replace(pxRegex, pxReplace);\n        clone[key] = newValue;\n      }\n      // no unit\n      if (!unitless[key] && typeof value === 'number' && value !== 0) {\n        clone[key] = `${value}px`.replace(pxRegex, pxReplace);\n      }\n      // Media queries\n      const mergedKey = key.trim();\n      if (mergedKey.startsWith('@') && mergedKey.includes('px') && mediaQuery) {\n        const newKey = key.replace(pxRegex, pxReplace);\n        clone[newKey] = clone[key];\n        delete clone[key];\n      }\n    });\n    return clone;\n  };\n  return {\n    visit\n  };\n};\nexport default transform;"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,oCAAoC;AACzD;AACA;AACA;AACA,OAAOC,QAAQ,MAAM,mBAAmB;AACxC,MAAMC,OAAO,GAAG,0CAA0C;AAC1D,SAASC,OAAOA,CAACC,MAAM,EAAEC,SAAS,EAAE;EAClC,MAAMC,UAAU,GAAGC,IAAI,CAACC,GAAG,CAAC,EAAE,EAAEH,SAAS,GAAG,CAAC,CAAC;IAC5CI,WAAW,GAAGF,IAAI,CAACG,KAAK,CAACN,MAAM,GAAGE,UAAU,CAAC;EAC/C,OAAOC,IAAI,CAACI,KAAK,CAACF,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE,GAAGH,UAAU;AACvD;AACA,MAAMM,SAAS,GAAG,SAAAA,CAAA,EAAY;EAC5B,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpF,MAAM;IACJG,SAAS,GAAG,EAAE;IACdZ,SAAS,GAAG,CAAC;IACba,UAAU,GAAG;EACf,CAAC,GAAGL,OAAO;EACX,MAAMM,SAAS,GAAGA,CAACC,CAAC,EAAEC,EAAE,KAAK;IAC3B,IAAI,CAACA,EAAE,EAAE,OAAOD,CAAC;IACjB,MAAME,MAAM,GAAGC,UAAU,CAACF,EAAE,CAAC;IAC7B;IACA,IAAIC,MAAM,IAAI,CAAC,EAAE,OAAOF,CAAC;IACzB,MAAMI,QAAQ,GAAGrB,OAAO,CAACmB,MAAM,GAAGL,SAAS,EAAEZ,SAAS,CAAC;IACvD,OAAQ,GAAEmB,QAAS,KAAI;EACzB,CAAC;EACD,MAAMC,KAAK,GAAGC,MAAM,IAAI;IACtB,MAAMC,KAAK,GAAG3B,QAAQ,CAAC,CAAC,CAAC,EAAE0B,MAAM,CAAC;IAClCE,MAAM,CAACC,OAAO,CAACH,MAAM,CAAC,CAACI,OAAO,CAACC,IAAI,IAAI;MACrC,IAAI,CAACC,GAAG,EAAEC,KAAK,CAAC,GAAGF,IAAI;MACvB,IAAI,OAAOE,KAAK,KAAK,QAAQ,IAAIA,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACrD,MAAMC,QAAQ,GAAGF,KAAK,CAACG,OAAO,CAAClC,OAAO,EAAEiB,SAAS,CAAC;QAClDQ,KAAK,CAACK,GAAG,CAAC,GAAGG,QAAQ;MACvB;MACA;MACA,IAAI,CAAClC,QAAQ,CAAC+B,GAAG,CAAC,IAAI,OAAOC,KAAK,KAAK,QAAQ,IAAIA,KAAK,KAAK,CAAC,EAAE;QAC9DN,KAAK,CAACK,GAAG,CAAC,GAAI,GAAEC,KAAM,IAAG,CAACG,OAAO,CAAClC,OAAO,EAAEiB,SAAS,CAAC;MACvD;MACA;MACA,MAAMkB,SAAS,GAAGL,GAAG,CAACM,IAAI,CAAC,CAAC;MAC5B,IAAID,SAAS,CAACE,UAAU,CAAC,GAAG,CAAC,IAAIF,SAAS,CAACH,QAAQ,CAAC,IAAI,CAAC,IAAIhB,UAAU,EAAE;QACvE,MAAMsB,MAAM,GAAGR,GAAG,CAACI,OAAO,CAAClC,OAAO,EAAEiB,SAAS,CAAC;QAC9CQ,KAAK,CAACa,MAAM,CAAC,GAAGb,KAAK,CAACK,GAAG,CAAC;QAC1B,OAAOL,KAAK,CAACK,GAAG,CAAC;MACnB;IACF,CAAC,CAAC;IACF,OAAOL,KAAK;EACd,CAAC;EACD,OAAO;IACLF;EACF,CAAC;AACH,CAAC;AACD,eAAeb,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}